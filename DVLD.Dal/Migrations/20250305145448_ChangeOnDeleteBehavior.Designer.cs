// <auto-generated />
using System;
using DVLD.Dal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DVLD.Dal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250305145448_ChangeOnDeleteBehavior")]
    partial class ChangeOnDeleteBehavior
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DVLD.Core.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("DVLD.Core.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DVLD.Core.Models.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicantId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("applicants", (string)null);
                });

            modelBuilder.Entity("DVLD.Core.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Afghanistan"
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "Albania"
                        },
                        new
                        {
                            CountryId = 3,
                            CountryName = "Algeria"
                        },
                        new
                        {
                            CountryId = 4,
                            CountryName = "Andorra"
                        },
                        new
                        {
                            CountryId = 5,
                            CountryName = "Angola"
                        },
                        new
                        {
                            CountryId = 6,
                            CountryName = "Argentina"
                        },
                        new
                        {
                            CountryId = 7,
                            CountryName = "Armenia"
                        },
                        new
                        {
                            CountryId = 8,
                            CountryName = "Australia"
                        },
                        new
                        {
                            CountryId = 9,
                            CountryName = "Austria"
                        },
                        new
                        {
                            CountryId = 10,
                            CountryName = "Azerbaijan"
                        },
                        new
                        {
                            CountryId = 11,
                            CountryName = "Bahamas"
                        },
                        new
                        {
                            CountryId = 12,
                            CountryName = "Bahrain"
                        },
                        new
                        {
                            CountryId = 13,
                            CountryName = "Bangladesh"
                        },
                        new
                        {
                            CountryId = 14,
                            CountryName = "Barbados"
                        },
                        new
                        {
                            CountryId = 15,
                            CountryName = "Belarus"
                        },
                        new
                        {
                            CountryId = 16,
                            CountryName = "Belgium"
                        },
                        new
                        {
                            CountryId = 17,
                            CountryName = "Belize"
                        },
                        new
                        {
                            CountryId = 18,
                            CountryName = "Benin"
                        },
                        new
                        {
                            CountryId = 19,
                            CountryName = "Bhutan"
                        },
                        new
                        {
                            CountryId = 20,
                            CountryName = "Bolivia"
                        },
                        new
                        {
                            CountryId = 21,
                            CountryName = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            CountryId = 22,
                            CountryName = "Botswana"
                        },
                        new
                        {
                            CountryId = 23,
                            CountryName = "Brazil"
                        },
                        new
                        {
                            CountryId = 24,
                            CountryName = "Brunei"
                        },
                        new
                        {
                            CountryId = 25,
                            CountryName = "Bulgaria"
                        },
                        new
                        {
                            CountryId = 26,
                            CountryName = "Burkina Faso"
                        },
                        new
                        {
                            CountryId = 27,
                            CountryName = "Burundi"
                        },
                        new
                        {
                            CountryId = 28,
                            CountryName = "Cambodia"
                        },
                        new
                        {
                            CountryId = 29,
                            CountryName = "Cameroon"
                        },
                        new
                        {
                            CountryId = 30,
                            CountryName = "Canada"
                        },
                        new
                        {
                            CountryId = 31,
                            CountryName = "Cape Verde"
                        },
                        new
                        {
                            CountryId = 32,
                            CountryName = "Central African Republic"
                        },
                        new
                        {
                            CountryId = 33,
                            CountryName = "Chad"
                        },
                        new
                        {
                            CountryId = 34,
                            CountryName = "Chile"
                        },
                        new
                        {
                            CountryId = 35,
                            CountryName = "China"
                        },
                        new
                        {
                            CountryId = 36,
                            CountryName = "Colombia"
                        },
                        new
                        {
                            CountryId = 37,
                            CountryName = "Comoros"
                        },
                        new
                        {
                            CountryId = 38,
                            CountryName = "Congo"
                        },
                        new
                        {
                            CountryId = 39,
                            CountryName = "Costa Rica"
                        },
                        new
                        {
                            CountryId = 40,
                            CountryName = "Croatia"
                        },
                        new
                        {
                            CountryId = 41,
                            CountryName = "Cuba"
                        },
                        new
                        {
                            CountryId = 42,
                            CountryName = "Cyprus"
                        },
                        new
                        {
                            CountryId = 43,
                            CountryName = "Czech Republic"
                        },
                        new
                        {
                            CountryId = 44,
                            CountryName = "Denmark"
                        },
                        new
                        {
                            CountryId = 45,
                            CountryName = "Djibouti"
                        },
                        new
                        {
                            CountryId = 46,
                            CountryName = "Dominica"
                        },
                        new
                        {
                            CountryId = 47,
                            CountryName = "Dominican Republic"
                        },
                        new
                        {
                            CountryId = 48,
                            CountryName = "Ecuador"
                        },
                        new
                        {
                            CountryId = 49,
                            CountryName = "Egypt"
                        },
                        new
                        {
                            CountryId = 50,
                            CountryName = "El Salvador"
                        },
                        new
                        {
                            CountryId = 51,
                            CountryName = "Equatorial Guinea"
                        },
                        new
                        {
                            CountryId = 52,
                            CountryName = "Eritrea"
                        },
                        new
                        {
                            CountryId = 53,
                            CountryName = "Estonia"
                        },
                        new
                        {
                            CountryId = 54,
                            CountryName = "Eswatini"
                        },
                        new
                        {
                            CountryId = 55,
                            CountryName = "Ethiopia"
                        },
                        new
                        {
                            CountryId = 56,
                            CountryName = "Fiji"
                        },
                        new
                        {
                            CountryId = 57,
                            CountryName = "Finland"
                        },
                        new
                        {
                            CountryId = 58,
                            CountryName = "France"
                        },
                        new
                        {
                            CountryId = 59,
                            CountryName = "Gabon"
                        },
                        new
                        {
                            CountryId = 60,
                            CountryName = "Gambia"
                        },
                        new
                        {
                            CountryId = 61,
                            CountryName = "Georgia"
                        },
                        new
                        {
                            CountryId = 62,
                            CountryName = "Germany"
                        },
                        new
                        {
                            CountryId = 63,
                            CountryName = "Ghana"
                        },
                        new
                        {
                            CountryId = 64,
                            CountryName = "Greece"
                        },
                        new
                        {
                            CountryId = 65,
                            CountryName = "Grenada"
                        },
                        new
                        {
                            CountryId = 66,
                            CountryName = "Guatemala"
                        },
                        new
                        {
                            CountryId = 67,
                            CountryName = "Guinea"
                        },
                        new
                        {
                            CountryId = 68,
                            CountryName = "Guinea-Bissau"
                        },
                        new
                        {
                            CountryId = 69,
                            CountryName = "Guyana"
                        },
                        new
                        {
                            CountryId = 70,
                            CountryName = "Haiti"
                        },
                        new
                        {
                            CountryId = 71,
                            CountryName = "Honduras"
                        },
                        new
                        {
                            CountryId = 72,
                            CountryName = "Hungary"
                        },
                        new
                        {
                            CountryId = 73,
                            CountryName = "Iceland"
                        },
                        new
                        {
                            CountryId = 74,
                            CountryName = "India"
                        },
                        new
                        {
                            CountryId = 75,
                            CountryName = "Indonesia"
                        },
                        new
                        {
                            CountryId = 76,
                            CountryName = "Iran"
                        },
                        new
                        {
                            CountryId = 77,
                            CountryName = "Iraq"
                        },
                        new
                        {
                            CountryId = 78,
                            CountryName = "Ireland"
                        },
                        new
                        {
                            CountryId = 79,
                            CountryName = "Israel"
                        },
                        new
                        {
                            CountryId = 80,
                            CountryName = "Italy"
                        },
                        new
                        {
                            CountryId = 81,
                            CountryName = "Jamaica"
                        },
                        new
                        {
                            CountryId = 82,
                            CountryName = "Japan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("DVLD.Core.Models.AppUser", b =>
                {
                    b.OwnsMany("DVLD.Core.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("AppUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AppUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("DVLD.Core.Models.Applicant", b =>
                {
                    b.HasOne("DVLD.Core.Models.Country", "Country")
                        .WithMany("Applicants")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVLD.Core.Models.AppUser", "User")
                        .WithOne("Applicant")
                        .HasForeignKey("DVLD.Core.Models.Applicant", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DVLD.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DVLD.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DVLD.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DVLD.Core.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DVLD.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DVLD.Core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DVLD.Core.Models.AppUser", b =>
                {
                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("DVLD.Core.Models.Country", b =>
                {
                    b.Navigation("Applicants");
                });
#pragma warning restore 612, 618
        }
    }
}
